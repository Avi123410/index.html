## CARS_DRDO Backend Boilerplate using Flask

# run.py
from app import create_app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True)


# app/__init__.py
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS

from .database import db

def create_app():
    app = Flask(__name__)
    CORS(app)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///cars_drdo.db'
    app.config['SECRET_KEY'] = 'your-secret-key'
    db.init_app(app)

    with app.app_context():
        from .routes import auth, forms, tables
        app.register_blueprint(auth.bp)
        app.register_blueprint(forms.bp)
        app.register_blueprint(tables.bp)
        db.create_all()

    return app


# app/database.py
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()


# app/models.py
from .database import db

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)
    role = db.Column(db.String(50))

class PIForm(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100))
    email = db.Column(db.String(100))
    research_area = db.Column(db.Text)

class ContactForm(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100))
    email = db.Column(db.String(100))
    message = db.Column(db.Text)


# app/routes/auth.py
from flask import Blueprint, request, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
from ..models import User
from ..database import db

bp = Blueprint('auth', __name__, url_prefix='/auth')

@bp.route('/register', methods=['POST'])
def register():
    data = request.json
    hashed_pw = generate_password_hash(data['password'])
    new_user = User(username=data['username'], password=hashed_pw, role=data.get('role', 'user'))
    db.session.add(new_user)
    db.session.commit()
    return jsonify({'message': 'User registered'})

@bp.route('/login', methods=['POST'])
def login():
    data = request.json
    user = User.query.filter_by(username=data['username']).first()
    if user and check_password_hash(user.password, data['password']):
        return jsonify({'message': 'Login successful', 'role': user.role})
    return jsonify({'message': 'Invalid credentials'}), 401


# app/routes/forms.py
from flask import Blueprint, request, jsonify
from ..models import PIForm, ContactForm
from ..database import db

bp = Blueprint('forms', __name__, url_prefix='/forms')

@bp.route('/pi', methods=['POST'])
def submit_pi():
    data = request.json
    form = PIForm(name=data['name'], email=data['email'], research_area=data['research_area'])
    db.session.add(form)
    db.session.commit()
    return jsonify({'message': 'PI Form submitted'})

@bp.route('/contact', methods=['POST'])
def submit_contact():
    data = request.json
    form = ContactForm(name=data['name'], email=data['email'], message=data['message'])
    db.session.add(form)
    db.session.commit()
    return jsonify({'message': 'Contact Form submitted'})


# app/routes/tables.py
from flask import Blueprint, jsonify
from ..models import PIForm

bp = Blueprint('tables', __name__, url_prefix='/tables')

@bp.route('/pi', methods=['GET'])
def get_pi_data():
    forms = PIForm.query.all()
    results = [{"name": f.name, "email": f.email, "research_area": f.research_area} for f in forms]
    return jsonify(results)


# requirements.txt
flask
flask_sqlalchemy
flask_cors
werkzeug
